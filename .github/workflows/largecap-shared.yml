name: LargeCap (shared)

on:
  workflow_call:
    inputs:
      send_discord:
        type: boolean
        default: true
      python-version:
        type: string
        default: '3.11'
      trails_keep_hours:         # daily だけ >0 を渡す
        type: number
        default: 0
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
      DISCORD_WEBHOOK:           # 旧名も許容
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
    env:
      MPLBACKEND: Agg
      # if: から参照できるよう job 環境にまとめる
      WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL || secrets.DISCORD_WEBHOOK }}

    steps:
      # 1) リポジトリ取得
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync repo (pull latest)
        run: |
          git config --global pull.rebase true
          git pull --rebase --autostash || true

      # 2) Python 準備
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip

      # 3) 依存
      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          pip install -r requirements.txt || pip install -U requests pyyaml pandas matplotlib

      # 4) effective を作成（部品）
      - name: Build effective configs (inject excludes)
        id: eff
        uses: ./.github/actions/build-effectives
        with:
          env-file: .github/workflows/largecap-watch.env
          configs: |
            config_largecap.yaml
            config_largecap_btc.yaml
            config_largecap_compare.yaml

      - name: Sanity check excludes (15m)
        shell: bash
        run: |
          python - <<'PY'
          import yaml, pathlib
          for p in (
              "config_largecap.effective.yaml",
              "config_largecap_btc.effective.yaml",
              "config_largecap_compare.effective.yaml",
          ):
              path = pathlib.Path(p)
              if not path.exists():
                  print(f"[CFG] skip {p} (not found)")
                  continue
              y = yaml.safe_load(path.read_text(encoding="utf-8")) or {}
              ex = y.get("exclude_ids") or []
              print(f"[CFG] {p}: exclude_ids={len(ex)}")
          PY

      # 5) 強弱（USD/BTC）
      - name: Run USD strength (15m)
        shell: bash
        run: python largecap_strength.py --config config_largecap.effective.yaml

      - name: Pause to avoid 429
        shell: bash
        run: sleep 8

      - name: Run BTC strength (15m)
        shell: bash
        run: python largecap_strength_btc.py --config config_largecap_btc.effective.yaml

      # 6) 比較（--trails-* は渡さない）
      - name: Run compare
        shell: bash
        run: |
          set -euo pipefail
          python compare_strength.py --config config_largecap_compare.effective.yaml

      # (daily only) 履歴ファイルが無ければ空CSVで初期化
      - name: Ensure trails history exists (daily)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          # ヘッダだけのCSV（timestamp列が必要）
          [[ -f data/trails_db.csv ]] || echo "timestamp,symbol,score,metric" > data/trails_db.csv
          ls -l --time-style=long-iso data/trails_db.csv


      # 7) daily のときだけ長期トレイルを更新
      - name: Update trails (long-range; daily only)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          TRAILS_KEEP_HOURS='${{ toJSON(inputs.trails_keep_hours) }}'
      
          # USD 側のトレイルを更新
          python plot_score_trails.py \
            --metric usd \
            --hist data/trails_db.json \
            --hours "$TRAILS_KEEP_HOURS"
      
          # BTC 側のトレイルを更新
          python plot_score_trails.py \
            --metric btc \
            --hist data/trails_db.json \
            --hours "$TRAILS_KEEP_HOURS"
      
          # 生成されたファイル確認（ログ用）
          ls -l --time-style=long-iso data/score_trails_*.png || true





      # 8) 迷子の生成物を data/ に集約（保険）
      - name: Normalize artifacts into data/
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p data
          for f in largecap_*.png largecap_*.csv score_trails_*.png score_trails_*.csv; do
            [[ -e "$f" ]] && mv -f "$f" data/
          done

      # 9) Discord 送信（data/ 固定 + 鮮度ガード）
      - name: Send charts to Discord
        if: ${{ inputs.send_discord && env.WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail
          WEBHOOK="$(printf '%s' "$WEBHOOK" | tr -d '\r\n' | sed -e 's/^ *//' -e 's/ *$//')"

          files=( 
            data/largecap_usd_vs_btc.png
            data/score_trails_usd.png
            data/score_trails_btc.png
            data/largecap_strength.png
            data/largecap_strength_btc.png
            data/score_trails_usdxbtc.png
          )

          now=$(date +%s); max_age=$((60*60))
          for f in "${files[@]}"; do
            [[ -f "$f" ]] || { echo "missing $f"; exit 1; }
            m=$(stat -c %Y "$f"); (( now-m <= max_age )) || { echo "stale $f"; exit 1; }
          done

          payload="$(jq -n --arg content "LargeCap 15m — $(date -u +'%Y-%m-%d %H:%M UTC')" '{content:$content}')"

          curl --fail-with-body -sS \
            -F "payload_json=${payload}" \
            -F "file1=@${files[0]};type=image/png" \
            -F "file2=@${files[1]};type=image/png" \
            -F "file3=@${files[2]};type=image/png" \
            -F "file4=@${files[3]};type=image/png" \
            -F "file5=@${files[4]};type=image/png" \
            -F "file6=@${files[5]};type=image/png" \
            "$WEBHOOK"

      # 10) 生成物コミット
      - name: Commit & push artifacts
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git add -A
          git diff --cached --quiet && { echo "Nothing to commit"; exit 0; }
          git commit -m "Update trails $(date -u +'%Y-%m-%dT%H:%MZ')"
          git pull --rebase --autostash
          git push
