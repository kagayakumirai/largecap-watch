name: LargeCap (shared)

on:
  workflow_call:
    inputs:
      send_discord:
        type: boolean
        default: true
      python-version:
        type: string
        default: '3.11'
      trails_keep_hours:         # daily だけ >0 を渡す
        type: number
        default: 0
      trails_show_hours:         # 描画に使う時間窓（15m: 48, daily: 720 など）
        type: number
        default: 48
      render_daily_hour:         # daily の描画時刻（UTC 時）
        type: string
        default: '00'
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
      DISCORD_WEBHOOK:           # 旧名も許容
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
    env:
      MPLBACKEND: Agg
      # if: から参照できるよう job 環境にまとめる
      WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL || secrets.DISCORD_WEBHOOK }}

    steps:
      # 1) リポジトリ取得
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync repo (pull latest)
        shell: bash
        run: |
          set -euo pipefail
          git config --global pull.rebase true
          git pull --rebase --autostash || true

      # 2) Python 準備
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip

      # 3) 依存
      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          pip install -r requirements.txt || pip install -U requests pyyaml pandas matplotlib

      # 3.5) YAML を先にリント（EOF などを早期発見）
      - name: Lint YAML (show line/col)
        shell: bash
        run: |
          python - <<'PY'
          import sys, yaml
          for p in ("config_largecap.yaml","config_largecap_btc.yaml","config_largecap_compare.yaml"):
              print("checking", p)
              try:
                  with open(p, encoding="utf-8") as f:
                      yaml.safe_load(f)
                  print("  OK")
              except Exception as e:
                  print("  ERROR:", e)
                  raise
          PY

      # 4) effective を作成（部品）
      - name: Build effective configs (inject excludes)
        id: eff
        uses: ./.github/actions/build-effectives
        with:
          env-file: .github/workflows/largecap-watch.env
          configs: |
            config_largecap.yaml
            config_largecap_btc.yaml
            config_largecap_compare.yaml

      - name: Sanity check excludes (15m)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import yaml, pathlib
          for p in (
              "config_largecap.effective.yaml",
              "config_largecap_btc.effective.yaml",
              "config_largecap_compare.effective.yaml",
          ):
              path = pathlib.Path(p)
              if not path.exists():
                  print(f"[CFG] skip {p} (not found)")
                  continue
              y = yaml.safe_load(path.read_text(encoding="utf-8")) or {}
              ex = y.get("exclude_ids") or []
              print(f"[CFG] {p}: exclude_ids={len(ex)}")
          PY

      # 5) 強弱（USD/BTC）
      - name: Run USD strength (15m)
        shell: bash
        run: |
          set -euo pipefail
          python largecap_strength.py --config config_largecap.effective.yaml

      - name: Pause to avoid 429
        shell: bash
        run: sleep 8

      - name: Run BTC strength (15m)
        shell: bash
        run: |
          set -euo pipefail
          python largecap_strength_btc.py --config config_largecap_btc.effective.yaml

      # 6) 比較（--trails-* は渡さない）
      - name: Run compare
        shell: bash
        run: |
          set -euo pipefail
          python compare_strength.py --config config_largecap_compare.effective.yaml

      #A) 15分ランでも3枚描く
      - name: Render short-range trails (15m; single source)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          SHOW=48
          COMMON_BASE="--hist data/trails_db.csv --hours $SHOW --topn 16 --rank abs --highlight 6 --right-labels"
          COMMON_USD_BTC="$COMMON_BASE --resample 1h --ema 3 --ylim 3.0"
          COMMON_USDXBTC="$COMMON_BASE --resample 30min --ema 1 --ylim 1.2 --topn 12 --highlight 6 --figh 5.5"

          python plot_score_trails.py --metric usd     $COMMON_USD_BTC
          python plot_score_trails.py --metric btc     $COMMON_USD_BTC
          python plot_score_trails.py --metric usdxbtc $COMMON_USDXBTC
      
          # _clean を従来名に揃える（後段の Verify/送信がこの名前を見る）
          U=$(ls -t score_trails_usd_*_clean.png     2>/dev/null | head -1 || true)
          B=$(ls -t score_trails_btc_*_clean.png     2>/dev/null | head -1 || true)
          X=$(ls -t score_trails_usdxbtc_*_clean.png 2>/dev/null | head -1 || true)
          [[ -n "$U" ]] && cp -f -- "$U" score_trails_usd.png
          [[ -n "$B" ]] && cp -f -- "$B" score_trails_btc.png
          [[ -n "$X" ]] && cp -f -- "$X" score_trails_usdxbtc.png
      
          ls -l --time-style=long-iso score_trails_*_clean.png score_trails_*.png || true

      # (daily only) 履歴ファイルが無ければ正しいヘッダーで初期化
      - name: Ensure trails history exists (daily)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          if [[ ! -f data/trails_db.csv ]]; then
            echo "timestamp,symbol,usd_score,btc_score" > data/trails_db.csv
            echo "[init] created data/trails_db.csv (empty with header)"
          fi
          head -n 2 data/trails_db.csv || true

      # (daily only) 履歴CSVが空なら、現在のUSD/BTCスナップショットで種付け（Python版）
      - name: Seed trails history from current snapshots (first run only)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          [[ -f data/trails_db.csv ]] || echo "timestamp,symbol,usd_score,btc_score" > data/trails_db.csv
          if [[ $(wc -l < data/trails_db.csv) -le 1 ]]; then
            cat >/tmp/seed_trails.py <<'PY'
          import pandas as pd, pathlib, datetime as dt
          def pick_score_col(df):
              for c in ['score','usd_score','btc_score','value','strength']:
                  if c in df.columns: return c
              num = df.select_dtypes('number').columns.tolist()
              return num[-1] if num else None
          p_usd = pathlib.Path('data/largecap_strength.csv')
          p_btc = pathlib.Path('data/largecap_strength_btc.csv')
          if not p_usd.exists() or not p_btc.exists():
              raise SystemExit("USD/BTC snapshot csv missing")
          dfu = pd.read_csv(p_usd); dfb = pd.read_csv(p_btc)
          cu = pick_score_col(dfu); cb = pick_score_col(dfb)
          if not cu or not cb:
              raise SystemExit(f"score columns not found (usd={cu}, btc={cb})")
          a = dfu[['symbol', cu]].rename(columns={cu:'usd_score'})
          b = dfb[['symbol', cb]].rename(columns={cb:'btc_score'})
          m = a.merge(b, on='symbol', how='outer')
          ts = dt.datetime.utcnow().replace(microsecond=0).isoformat() + 'Z'
          m.insert(0, 'timestamp', ts)
          m[['timestamp','symbol','usd_score','btc_score']].to_csv(
              'data/trails_db.csv', mode='a', header=False, index=False
          )
          print(f"[seed] appended {len(m)} rows into data/trails_db.csv at {ts}")
          PY
            python /tmp/seed_trails.py
          else
            echo "[seed] trails_db.csv already has rows, skip"
          fi
          head -n 3 data/trails_db.csv || true

      - name: Repair trails history (daily; bash only)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          f="data/trails_db.csv"
          mkdir -p data
          [[ -f "$f" ]] || echo "timestamp,symbol,usd_score,btc_score" > "$f"
          sed -i 's/\r$//' "$f"  # CRLF→LF
          # BOM除去
          if head -c3 "$f" | grep -q $'^\xEF\xBB\xBF'; then
            tail -c +4 "$f" > /tmp/_clean && mv /tmp/_clean "$f"
            echo "[repair] removed BOM"
          fi
          # 区切り子を , に統一
          if ! head -n1 "$f" | grep -q ','; then
            if head -n1 "$f" | grep -q ';'; then
              tr ';' ',' < "$f" > /tmp/_csv && mv /tmp/_csv "$f"
              echo "[repair] replaced ; -> ,"
            elif head -n1 "$f" | grep -q $'\t'; then
              awk -v OFS=',' 'BEGIN{FS="\t"} {print $0}' "$f" > /tmp/_csv && mv /tmp/_csv "$f"
              echo "[repair] replaced TAB -> ,"
            fi
          fi
          # ヘッダを正規化
          if ! head -n1 "$f" | grep -q '^timestamp,'; then
            tail -n +2 "$f" > /tmp/_rest || true
            printf "timestamp,symbol,usd_score,btc_score\n" > "$f"
            cat /tmp/_rest >> "$f" || true
            echo "[repair] normalized header"
          fi
          echo "== head trails_db.csv =="; head -n 3 "$f" | cat -A

      - name: Seed trails history from current snapshots (bash only; first run)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          f="data/trails_db.csv"
          if [[ $(wc -l < "$f") -le 1 ]]; then
            ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            pick_cols() {
              awk -F',' -v cand="$2" '
                NR==1{
                  n=split(cand,a," ");
                  for(i=1;i<=NF;i++){
                    l=tolower($i)
                    if(l=="symbol") sym=i
                    for(j=1;j<=n;j++) if(l==a[j]) sc=i
                  } next
                }
                NR==2 && !sc { for(i=NF;i>=1;i--) if($i ~ /^-?[0-9.]+([eE][+-]?[0-9]+)?$/){ sc=i; break } }
                END{ if(sym && sc) printf "%d,%d\n", sym, sc; else exit 3 }' "$1"
            }
            idx=$(pick_cols "data/largecap_strength.csv" "usd_score score value strength") || { echo "pick USD failed"; exit 1; }
            IFS=, read -r sym_u sc_u <<<"$idx"
            awk -F',' -v s="$sym_u" -v c="$sc_u" 'NR>1 && $s!=""{print $s","$c}' data/largecap_strength.csv \
              | sort -t, -k1,1 > /tmp/usd.csv
            idx=$(pick_cols "data/largecap_strength_btc.csv" "btc_score score value strength") || { echo "pick BTC failed"; exit 1; }
            IFS=, read -r sym_b sc_b <<<"$idx"
            awk -F',' -v s="$sym_b" -v c="$sc_b" 'NR>1 && $s!=""{print $s","$c}' data/largecap_strength_btc.csv \
              | sort -t, -k1,1 > /tmp/btc.csv
            join -t, -a 1 -a 2 -e "" -o '0,1.2,2.2' -1 1 -2 1 /tmp/usd.csv /tmp/btc.csv > /tmp/merged.csv || true
            awk -F',' -v OFS=',' -v ts="$ts" '{print ts,$0}' /tmp/merged.csv >> "$f"
            echo "[seed] appended $(wc -l < /tmp/merged.csv) rows at $ts"
          else
            echo "[seed] already initialized; skip"
          fi
          head -n 3 "$f" | cat -A

      # (daily only) 現在のスナップショットを trails_db.csv に追記（毎時）
      - name: Append current snapshot to trails history (daily; bash only)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          f="data/trails_db.csv"; mkdir -p data
          [[ -f "$f" ]] || echo "timestamp,symbol,usd_score,btc_score" > "$f"
          sed -i 's/\r$//' "$f"
          ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          pick() {
            awk -F',' -v cand="$2" '
              NR==1{
                n=split(cand,a," ");
                for(i=1;i<=NF;i++){
                  l=tolower($i)
                  if(l=="symbol") sym=i
                  for(j=1;j<=n;j++) if(l==a[j]) sc=i
                } next
              }
              NR==2 && !sc { for(i=NF;i>=1;i--) if($i ~ /^-?[0-9.]+([eE][+-]?[0-9]+)?$/){ sc=i; break } }
              END{ if(sym&&sc) printf "%d,%d\n",sym,sc; else exit 3 }' "$1"
          }
          idx=$(pick "data/largecap_strength.csv" "usd_score score value strength") || { echo "pick USD failed"; exit 1; }
          IFS=, read -r sym_u sc_u <<<"$idx"
          awk -F',' -v s="$sym_u" -v c="$sc_u" 'NR>1 && $s!=""{print $s","$c}' data/largecap_strength.csv \
            | sort -t, -k1,1 > /tmp/usd.csv
          idx=$(pick "data/largecap_strength_btc.csv" "btc_score score value strength") || { echo "pick BTC failed"; exit 1; }
          IFS=, read -r sym_b sc_b <<<"$idx"
          awk -F',' -v s="$sym_b" -v c="$sc_b" 'NR>1 && $s!=""{print $s","$c}' data/largecap_strength_btc.csv \
            | sort -t, -k1,1 > /tmp/btc.csv
          join -t, -a1 -a2 -e "" -o '0,1.2,2.2' -1 1 -2 1 /tmp/usd.csv /tmp/btc.csv > /tmp/merged.csv || true
          awk -F',' -v OFS=',' -v ts="$ts" '{print ts,$0}' /tmp/merged.csv >> "$f"
          echo "[append] $(wc -l < /tmp/merged.csv) rows at $ts"


      # quiet legacy JSON warning (optional)
      - name: Quiet legacy JSON history warning
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          [[ -f data/trails_db.json ]] || echo '{"usd":[],"btc":[]}' > data/trails_db.json

      - name: Compute daily render gate
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 }}
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          HNOW=$(date -u +%H)
          TARGET='${{ inputs.render_daily_hour }}'
          if [[ "$HNOW" == "$TARGET" ]]; then echo "render=1" >> "$GITHUB_OUTPUT"; else echo "render=0" >> "$GITHUB_OUTPUT"; fi
          echo "UTC now=$HNOW target=$TARGET"

      - name: Render long-range charts (daily gate)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 && steps.gate.outputs.render == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          SHOW='${{ inputs.trails_show_hours }}'   # 例: 720（整数の“時間”）
          COMMON="--hist data/trails_db.csv --hours $SHOW --topn 16 --rank abs --highlight 6 --resample 1H --ema 3 --right-labels --ylim 3.0"
          python plot_score_trails.py --metric usd $COMMON
          python plot_score_trails.py --metric btc $COMMON
          python plot_score_trails.py --metric usdxbtc $COMMON --ylim 1.6   # ← 追加
          # 改良版のファイル名(_clean)から互換名を用意
          U=$(ls -t score_trails_usd_*_clean.png 2>/dev/null | head -1 || true)
          B=$(ls -t score_trails_btc_*_clean.png 2>/dev/null | head -1 || true)
          X=$(ls -t score_trails_usdxbtc_*_clean.png 2>/dev/null | head -1 || true)
          
          [[ -n "$U" ]] && cp -f -- "$U" score_trails_usd.png
          [[ -n "$B" ]] && cp -f -- "$B" score_trails_btc.png
          [[ -n "$X" ]] && cp -f -- "$X" score_trails_usdxbtc.png
          ls -l --time-style=long-iso score_trails_*_clean.png score_trails_usd.png score_trails_btc.png || true

      - name: Render monthly (30d) trails with daily aggregation (daily gate)
        if: ${{ fromJSON(inputs.trails_keep_hours) > 0 && steps.gate.outputs.render == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          H=720        # 30日＝720h
          TOP=12       # 見やすく少なめ
          COMMON="--hist data/trails_db.csv --hours $H --topn $TOP \
            --rank abs --highlight 6 --resample 1d --ema 0 --right-labels --ylim 2.0"
      
          python plot_score_trails.py --metric usd     $COMMON
          python plot_score_trails.py --metric btc     $COMMON
          python plot_score_trails.py --metric usdxbtc $COMMON
      
          # 出力ファイル（plot側は *_h{H}_top{TOP}_clean.png）を固定名へコピー
          U="score_trails_usd_h${H}_top${TOP}_clean.png"
          B="score_trails_btc_h${H}_top${TOP}_clean.png"
          X="score_trails_usdxbtc_h${H}_top${TOP}_clean.png"
      
          [[ -f "$U" ]] && cp -f -- "$U" data/score_trails_usd_daily30.png
          [[ -f "$B" ]] && cp -f -- "$B" data/score_trails_btc_daily30.png
          [[ -f "$X" ]] && cp -f -- "$X" data/score_trails_usdxbtc_daily30.png
      
          ls -l --time-style=long-iso data/score_trails_*daily30.png || true


      # 8) 迷子の生成物を data/ に集約（保険）
      - name: Normalize artifacts into data/
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p data
          for f in largecap_*.png largecap_*.csv score_trails_*.png score_trails_*.csv; do
            [[ -e "$f" ]] && mv -f "$f" data/
          done

      # 生成直後チェック（mtime/ハッシュ）
      - name: Verify artifacts freshness & diff
        shell: bash
        run: |
          set -euo pipefail
          files=(data/largecap_usd_vs_btc.png data/largecap_strength.png data/largecap_strength_btc.png data/score_trails_usd.png data/score_trails_btc.png data/score_trails_usdxbtc.png)
          echo "== mtimes & size =="; ls -l --time-style=long-iso "${files[@]}"
          echo "== current sha256 =="; sha256sum "${files[@]}" || true
          echo "== previous commit sha256 =="
          for f in "${files[@]}"; do
            if git show "HEAD:$f" >/tmp/prev 2>/dev/null; then
              echo "-- $f"; sha256sum /tmp/prev
            else
              echo "-- $f : (no previous)"
            fi
          done

      # 9) Discord 送信（data/ 固定 + 鮮度ガード）
      - name: Send charts to Discord
        if: ${{ success() && inputs.send_discord && env.WEBHOOK != '' }}
        shell: bash
        run: |
          set -euo pipefail
          WEBHOOK="$(printf '%s' "$WEBHOOK" | tr -d '\r\n' | sed -e 's/^ *//' -e 's/ *$//')"
          files=(
            data/largecap_usd_vs_btc.png
            data/score_trails_usd.png
            data/score_trails_btc.png
            data/largecap_strength.png
            data/largecap_strength_btc.png
            data/score_trails_usdxbtc.png
          )
          now=$(date +%s); max_age=$((60*60))
          for f in "${files[@]}"; do
            [[ -f "$f" ]] || { echo "missing $f"; exit 1; }
            m=$(stat -c %Y "$f"); (( now-m <= max_age )) || { echo "stale $f"; exit 1; }
          done
          payload="$(jq -n --arg content "LargeCap 15m — $(date -u +'%Y-%m-%d %H:%M UTC')" '{content:$content}')"
          curl --fail-with-body -sS \
            -F "payload_json=${payload}" \
            -F "file1=@${files[0]};type=image/png" \
            -F "file2=@${files[1]};type=image/png" \
            -F "file3=@${files[2]};type=image/png" \
            -F "file4=@${files[3]};type=image/png" \
            -F "file5=@${files[4]};type=image/png" \
            -F "file6=@${files[5]};type=image/png" \
            "$WEBHOOK"

      - name: Send monthly (30d/daily) charts to Discord (daily gate)
        if: ${{ success() && inputs.send_discord && env.WEBHOOK != '' && steps.gate.outputs.render == '1' }}
        shell: bash
        run: |
          set -euo pipefail
          files=(
            data/score_trails_usd_daily30.png
            data/score_trails_btc_daily30.png
            data/score_trails_usdxbtc_daily30.png
          )
          for f in "${files[@]}"; do [[ -f "$f" ]] || { echo "missing $f"; exit 1; }; done
          payload="$(jq -n --arg content "LargeCap monthly (daily-agg) — $(date -u +'%Y-%m-%d %H:%M UTC')" '{content:$content}')"
          curl --fail-with-body -sS \
            -F "payload_json=${payload}" \
            -F "file1=@${files[0]};type=image/png" \
            -F "file2=@${files[1]};type=image/png" \
            -F "file3=@${files[2]};type=image/png" \
            "$WEBHOOK"


      # 10) 生成物コミット
      - name: Commit & push artifacts
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git add -A
          git diff --cached --quiet && { echo "Nothing to commit"; exit 0; }
          git commit -m "Update trails $(date -u +'%Y-%m-%dT%H:%MZ')"
          git pull --rebase --autostash
          git push
